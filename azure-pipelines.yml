# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
#

trigger:
  branches:
    include:
    - main
    - releases/*
pr:
  - main
  - releases/*

pool:
  vmImage: ubuntu-latest

resources:
  containers:
    - container: ubuntu18.04-gcc11-conan2-doxygen1.9.6
      image: mattgomes28/cpp:0.0
      options: --user 0:0

stages:

- stage: failfast
  displayName: FailFast Checks
  jobs:
  - job: failfast
    displayName: Failfast Scripts
    container: ubuntu18.04-gcc11-conan2-doxygen1.9.6
    continueOnError: false
    steps:
    - bash: scripts/shellcheck.sh
      displayName: Linting Shell
      workingDirectory: $(Build.SourcesDirectory)
    - bash: scripts/cpp-lint.sh
      displayName: Linting CPP files
      workingDirectory: $(Build.SourcesDirectory)

- stage: build_cmake
  displayName: Build CMake
  dependsOn:
    - failfast

  jobs:
  - template: scripts/pipeline/ubuntu_build.yml
    parameters:
      jobName: ubuntu_build_x86_64_fetch_debug
      buildType: Debug
      cmakePreset: unix-deb
      containerName: ubuntu18.04-gcc11-conan2-doxygen1.9.6
      sourceDir: $(Build.SourcesDirectory)/fetch-content
      artifactName: CmakeDebugBuild

  - template: scripts/pipeline/ubuntu_build.yml
    parameters:
      jobName: ubuntu_build_x86_64_fetch_release
      buildType: Release
      cmakePreset: unix-rel
      containerName: ubuntu18.04-gcc11-conan2-doxygen1.9.6
      sourceDir: $(Build.SourcesDirectory)/fetch-content
      artifactName: CmakeReleaseBuild

- stage: build_conan
  displayName: Build Conan
  dependsOn:
    - failfast
  
  jobs:
  - template: scripts/pipeline/ubuntu_build.yml
    parameters:
      jobName: ubuntu_build_x86_64_conan_debug
      buildType: Debug
      cmakePreset: unix-deb-conan
      containerName: ubuntu18.04-gcc11-conan2-doxygen1.9.6
      sourceDir: $(Build.SourcesDirectory)/conan
      artifactName: ConanDebugBuild
      preBuildCommand: ./scripts/helpers/conan-install.sh Debug

- stage: build_vcpkg
  displayName: Build Vcpkg
  dependsOn:
    - failfast
  jobs:
  - template: scripts/pipeline/ubuntu_build.yml
    parameters:
      jobName: ubuntu_build_x86_64_vcpkg_debug
      buildType: Debug
      cmakePreset: unix-deb-vcpkg
      containerName: ubuntu18.04-gcc11-conan2-doxygen1.9.6
      sourceDir: $(Build.SourcesDirectory)/vcpkg
      artifactName: VcpkgDebugBuild
      preBuildCommand: ./scripts/helpers/vcpkg-install.sh Debug

- stage: tests
  displayName: Running Ubuntu Tests
  dependsOn:
    - build_cmake
    - build_conan
    - build_vcpkg
  jobs:
  - template: scripts/pipeline/ubuntu_test.yml
    parameters:
      displayName: CMake Fetch* Tests
      cmakePreset: unix-deb
      containerName: ubuntu18.04-gcc11-conan2-doxygen1.9.6
      sourceDir: $(Build.SourcesDirectory)/fetch-content
      artifactName: CmakeDebugBuild

  - template: scripts/pipeline/ubuntu_test.yml
    parameters:
      displayName: Conan Tests
      cmakePreset: unix-deb-conan
      containerName: ubuntu18.04-gcc11-conan2-doxygen1.9.6
      sourceDir: $(Build.SourcesDirectory)/conan
      artifactName: ConanDebugBuild

  - template: scripts/pipeline/ubuntu_test.yml
    parameters:
      displayName: Vcpkg Tests
      cmakePreset: unix-deb-vcpkg
      containerName: ubuntu18.04-gcc11-conan2-doxygen1.9.6
      sourceDir: $(Build.SourcesDirectory)/vcpkg
      artifactName: VcpkgDebugBuild
      